{"version":3,"sources":["components/Plot.js","components/Chooser.js","App.js","serviceWorker.js","index.js"],"names":["Plot","plotting_interval_reference","angle","speed","useState","plot","setPlot","t","window","onload","Chart","document","getElementById","type","data","labels","datasets","label","borderColor","fill","options","className","onSubmit","event","preventDefault","Math","PI","setInterval","time","push","sin","cos","update","onClick","clearInterval","id","width","height","Chooser","updateAngle","updateSpeed","htmlFor","name","min","max","defaultValue","onChange","evt","Number","target","value","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NAoFeA,MAhFf,YAA+B,IAIzBC,EAJSC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,MAAQ,EAEJC,mBAAS,IAFL,mBAErBC,EAFqB,KAEfC,EAFe,KAOxBC,EAAI,EA2DR,OArBAC,OAAOC,OAAS,WAIdH,EAAQ,IAAII,IAAMC,SAASC,eAAe,cAAe,CACvDC,KAAM,OACNC,KAAM,CACJC,OAAQ,GACRC,SAAU,CAAC,CACTF,KAAM,GACNG,MAAO,yBACPC,YAAa,UACbC,MAAM,KAGVC,QAAS,OAOX,yBAAKC,UAAU,QACb,0BAAMC,SAxCY,SAACC,GAMrBhB,EAAI,EACJgB,EAAMC,iBACNtB,EAAQA,EAAQ,IAAMuB,KAAKC,GAC3BrB,EAAKS,KAAKE,SAAS,GAAGF,KAAO,GAC7BT,EAAKS,KAAKC,OAAS,GACnBd,EAA8B0B,aAAY,WArB5C,IAA0BC,IAsBLrB,EAjBnBF,EAAKS,KAAKE,SAAS,GAAGF,KAAKe,KAAM1B,EAAQyB,EAAOH,KAAKK,IAAI5B,GAjBnD,KAiBmE0B,EAAOA,EAAQ,GACxFvB,EAAKS,KAAKC,OAAOc,KAAK1B,EAAQyB,EAAOH,KAAKM,IAAI7B,IAC9CG,EAAK2B,SAgBHzB,GAAQ,KACP,OA2BC,4BAAQM,KAAK,SAASQ,UAAU,wBAAhC,WAEF,6BACA,4BAAQA,UAAU,yBAAyBY,QA/D/C,WAKE/B,EAAgB,IAARA,EAAcuB,KAAKC,GAC3BQ,cAAcjC,KAyDZ,mBACA,yBAAKoB,UAAU,QACb,4BAAQc,GAAG,aAAaC,MAAM,MAAMC,OAAO,WCxCpCC,MAlCf,WAAoB,IAAD,EAEYlC,mBAAS,GAFrB,mBAEVF,EAFU,KAEHqC,EAFG,OAGYnC,mBAAS,GAHrB,mBAGVD,EAHU,KAGHqC,EAHG,KAKjB,OACE,yBAAKnB,UAAU,WACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,cACb,2BAAOoB,QAAQ,SAAf,iEACA,yBAAKpB,UAAU,wBACf,2BAAOR,KAAK,SAASQ,UAAU,eAAec,GAAG,QAAQO,KAAK,QACvDC,IAAI,IAAIC,IAAI,KAAKC,aAAa,IAC9BC,SAAU,SAACC,GAAD,OAASR,EAAYS,OAAOD,EAAIE,OAAOC,aAI1D,yBAAK7B,UAAU,cACb,2BAAOoB,QAAQ,SAAf,2BACA,yBAAKpB,UAAU,wBACb,2BAAOR,KAAK,SAASQ,UAAU,eAAec,GAAG,QAAQO,KAAK,QACvDC,IAAI,IAAIE,aAAa,IACrBC,SAAU,SAACC,GAAD,OAASP,EAAYQ,OAAOD,EAAIE,OAAOC,cAK9D,yBAAK7B,UAAU,wBACb,kBAAC,EAAD,CAAMnB,MAAOA,EAAOC,MAAOA,OCjBpBgD,MAXf,WACE,OACE,yBAAK9B,UAAU,OACb,2CACA,uGACA,qGACA,kBAAC,EAAD,QCEc+B,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/C,SAASC,eAAe,SDyHpB,kBAAmB+C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c02726c5.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport Chart from 'chart.js';\nimport \"../App.css\";\n\nfunction Plot({angle, speed}) {\n\n  const [plot, setPlot] = useState({});\n\n  var plotting_interval_reference;\n  //physics stuff:\n  var g = 9.81;\n  var t = 0;\n\n  function stopSimulation() {\n    /**\n     * This method is called after clicking the STOP button. Clears the plotting_interval_reference\n     * variable and recalculates the angle to deg (to prevent from doubling the rad conversion).\n     */\n    angle = angle * 180 / Math.PI;\n    clearInterval(plotting_interval_reference);\n  }\n\n  function calculate_points(time) {\n    /**\n     * This function calculates the next X and Y for the chart trajectory and\n     * updates plot's arrays.\n     */\n    plot.data.datasets[0].data.push((speed * time * Math.sin(angle)) - ((g * time * time) / 2));\n    plot.data.labels.push(speed * time * Math.cos(angle));\n    plot.update();\n  }\n\n  const startPlotting = (event) => {\n    /**\n     * This function is called after pressing Throw button - resets the time variable,\n     * calculates the rad value of angle, empties the plot's X (labels) and Y (dataset data) arrays\n     * and invokes the setInterval method which sets up plotting function.\n     */\n    t = 0;\n    event.preventDefault();\n    angle = angle / 180 * Math.PI;\n    plot.data.datasets[0].data = [];\n    plot.data.labels = [];\n    plotting_interval_reference = setInterval(() => {\n      calculate_points(t);\n      t = t + 0.1;\n    }, 100);\n  };\n\n  window.onload = function() {\n    /**\n     * This method is called when page loads and sets up the chart for canvas.\n     */\n    setPlot(new Chart(document.getElementById(\"line-chart\"), {\n      type: 'line',\n      data: {\n        labels: [],\n        datasets: [{\n          data: [],\n          label: \"Throw trajectory curve\",\n          borderColor: \"#000000\",\n          fill: false\n        }]\n      },\n      options: {\n      }\n    }));\n  };\n\n\n  return (\n    <div className=\"Plot\">\n      <form onSubmit={startPlotting}>\n        <button type=\"submit\" className=\"btn btn-outline-dark\">Throw!</button>\n      </form>\n      <br/>\n      <button className=\"btn btn-outline-danger\" onClick={stopSimulation}>STOP simulation</button>\n      <div className=\"plot\">\n        <canvas id=\"line-chart\" width=\"800\" height=\"450\"></canvas>\n      </div>\n    </div>\n  );\n}\n\nexport default Plot;\n","import React, {useState} from \"react\";\nimport \"../App.css\";\nimport Plot from \"./Plot\";\n\nfunction Chooser() {\n\n  const [angle, updateAngle] = useState(0);\n  const [speed, updateSpeed] = useState(0);\n\n  return (\n    <div className=\"Chooser\">\n      <div className=\"div-content col-md-4\">\n        <div className=\"form-group\">\n          <label htmlFor=\"angle\">Throw angle in deg (counter-clockwise from the ground level):</label>\n          <div className=\"div-content col-md-3\">\n          <input type=\"number\" className=\"form-control\" id=\"angle\" name=\"angle\"\n                 min=\"0\" max=\"90\" defaultValue=\"0\"\n                 onChange={(evt) => updateAngle(Number(evt.target.value))}\n          />\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"force\">Initial speed (in m/s):</label>\n          <div className=\"div-content col-md-3\">\n            <input type=\"number\" className=\"form-control\" id=\"force\" name=\"force\"\n                   min=\"0\" defaultValue=\"0\"\n                   onChange={(evt) => updateSpeed(Number(evt.target.value))}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"div-content col-md-8\">\n        <Plot angle={angle} speed={speed} />\n      </div>\n    </div>\n  );\n}\n\nexport default Chooser;\n","import React from 'react';\nimport Chooser from \"./components/Chooser\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Hello there</h1>\n      <h2>This app allows you to simulate various physical throws using chart.js.</h2>\n      <h2>Choose your options below, click the button and let the magic happen.</h2>\n      <Chooser/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}